{"version":3,"sources":["Components/Cart/Cart.js","Components/MenuToRender/MenuToRender.js","App.js","serviceWorker.js","index.js"],"names":["Cart","props","className","products","map","price","title","id","image","category","key","onClick","evt","onRemove","src","alr","MenuToRender","this","handleClick","count","type","value","name","checked","selectRadioOption","onChange","radioChange","onRadioValue","radioValue","isAvailable","change","checkBoxValue","reset","Component","App","state","isLoading","filteredProducts","fixValueMax","renderCart","setState","e","preventDefault","temp","i","quantity","push","findCategory","target","removeItem","filter","n","fetch","res","json","pr","data","handleChangeSize","handleChangeSort","length","handleLessMinimum","radioDispay","handleAddToCart","handleRemoveFromCart","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c07e492.chunk.js","sourcesContent":["import React from 'react';\n\nimport './style.css';\n\nconst Cart = (props) => {\n  return (\n    <div className='container' > \n      \n      {props.products.map(({ price, title, id, image, category }) => (\n        <div className=\"CartItem\" key={id} onClick={evt => props.onRemove(id)} >\n        \n          <img src={image} alr={`${image}, ${id}`} />\n          <span> { title } </span>\n          <span> Price: { price } </span>\n          <span> Category: { category.title }</span>\n        </div>\n      ))}\n      \n\n      \n      \n\n    </div>\n  )\n};\n\nexport default Cart;","import React, {Component} from 'react';\nimport Cart from '../Cart/Cart';\n\n\n\n\nclass MenuToRender extends Component {\n\n  \n  render() {\n    return (\n      <div  className='main' onClick={this.handleClick}>\n\n        <span>Total products: {this.props.count}</span>\n\n        <form className='menu'>\n\n\n\n\n\n\n          <div className='radio_group'>\n            <input \n              type='radio'\n              value='Yes'\n              name=\"radio\"\n              checked={this.props.selectRadioOption === 'Yes'}\n              onChange={this.props.radioChange}\n              /> Yes\n\n\n             <input \n              type='radio'\n              value=\"No\"\n              name=\"radio\"\n              checked={this.props.selectRadioOption === 'No'}\n              onChange={this.props.radioChange}\n            /> Nop\n            <h3>{this.props.selectRadioOption}</h3>\n          </div>\n            <button onClick={this.props.onRadioValue} value={this.props.radioValue}>1. Price Or Less 5000</button>\n\n\n\n\n\n\n\n\n\n\n\n\n\n          <div onClick={this.props.isAvailable}>2. Check if Available</div>\n\n          <div>\n            <select id=\"lang\" onChange={this.props.change} value={this.props.checkBoxValue}>\n              <option value=\"select\">3. Select</option>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n\n            </select>\n          </div>\n\n          <div onClick={this.props.reset}>4. Reset</div>\n       </form>\n    </div>\n    );\n  }\n}\n\nexport default MenuToRender;","import React, { Component } from \"react\";\nimport Cart from \"./Components/Cart/Cart\";\nimport MenuToRender from \"./Components/MenuToRender/MenuToRender\";\n\n\nconst link = \"https://www.mocky.io/v2/5d944b9f2f00006b008ff619\";\n\nclass App extends Component {\n  state = {\n    isLoading: true,\n    products: [],\n    filteredProducts: [],\n    checkBoxValue: '',\n    selectRadioOption: null,\n    fixValueMax:5000\n  };\n\n  async componentDidMount() {\n    const res = await fetch(link);\n    const pr = await res.json();    \n    const products = pr.data;\n\n    this.setState({\n      products,\n      filteredProducts: products\n    })\n  }\n  \n  renderCart = () => {\n    this.setState({\n      isLoading: false,\n    })\n  }\n\n\n// Is Available\n  isAvailable = (e) => {\n    e.preventDefault()\n    let temp = [];\n    for(let i of this.state.filteredProducts) {\n      if(i.quantity > 0) {\n        temp.push(i)\n      }\n    }\n\n    this.setState({\n      filteredProducts: temp\n    })\n  }\n\n\n  // SELECT\n  findCategory = (e) => {\n    \n    let temp = [];\n    for(let i of this.state.filteredProducts) {\n\n      if(i.category.id == e.target.value) {\n        temp.push(i)\n      }\n    }\n\n    this.setState({\n      filteredProducts: temp\n    })\n  }\n\n  // Reset all settings\n  reset = () => {\n    let products = this.state.products\n    this.setState({\n      filteredProducts: products\n    })\n  }\n  \n  removeItem = (id) => {\n    this.setState({\n      filteredProducts: this.state.filteredProducts.filter(n => n.id !== id)\n    })\n  }\n  \n  \n  radioChange = (e) => {\n    this.setState({\n      selectRadioOption: e.target.value\n    })     \n  }\n  \n  \n  onRadioValue = (e) => {\n    e.preventDefault()\n    \n    let temp = [];\n    if(this.state.selectRadioOption === 'Yes') {\n\n      for(let i of this.state.filteredProducts) {\n        if(i.price >= this.state.fixValueMax) {\n          temp.push(i)\n        }\n      }\n\n      this.setState({\n        filteredProducts: temp\n      })\n    } else {\n      for(let i of this.state.filteredProducts) {\n        if(i.price < this.state.fixValueMax) {\n          temp.push(i)\n        }\n      }\n      this.setState({\n        filteredProducts: temp\n      })\n    }\n  }\n\n\n\n   \n    render() {\n    return (\n      <div onClick={this.renderCart} className=\"main\">\n\n          <h1>App</h1>\n          <span >Click ME to render</span>\n    \n        {this.state.isLoading \n          ? <span>LOADNIG</span> \n          : (\n              <>              \n                <MenuToRender\n                  handleChangeSize={this.handleChangeSize} \n                  handleChangeSort={this.handleChangeSort} \n                  count={this.state.filteredProducts.length}\n                  handleLessMinimum={this.handleLessMinimum}\n                  isAvailable={this.isAvailable}\n                  change={this.findCategory}\n                  checkBoxValue={this.state.checkBoxValue}\n                  reset={this.reset}\n                  checked={this.state.selectRadioOption}\n                  radioChange={this.radioChange}\n                  radioDispay={this.radioDispay}\n\n                  onRadioValue={this.onRadioValue}\n                  radioValue={this.state.selectRadioOption}\n                  \n                  />\n                <hr/>\n                <Cart \n                  products={this.state.filteredProducts}\n                  handleAddToCart={this.handleAddToCart}\n                  handleRemoveFromCart={this.handleRemoveFromCart}\n                  onRemove={id => this.removeItem(id)}\n                /> \n           \n              </>\n            )\n        \n        }\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}